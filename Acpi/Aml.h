#pragma once
#include <stddef.h>
#include <stdint.h>

enum AmlOpcodes {
	ZERO_OP = 0x00,
	ONE_OP = 0x01,
	ALIAS_OP = 0x06,
	NAME_OP = 0x08,
	BYTEPREFIX = 0x0A,
	WORDPREFIX = 0x0B,
	DWORDPREFIX = 0x0C,
	STRINGPREFIX = 0x0D,
	QWORDPREFIX = 0x0E,
	SCOPE_OP = 0x10,
	BUFFER_OP = 0x11,
	PACKAGE_OP = 0x12,
	VARPACKAGE_OP = 0x13,
	METHOD_OP = 0x14,
	DUAL_PREFIX = 0x2E,
	MULTI_PREFIX = 0x2F,
	EXTOP_PREFIX = 0x5B,
	ROOT_CHAR = 0x5C,
	PARENT_CHAR = 0x5E,
	LOCAL0_OP = 0x60,
	LOCAL1_OP = 0x61,
	LOCAL2_OP = 0x62,
	LOCAL3_OP = 0x63,
	LOCAL4_OP = 0x64,
	LOCAL5_OP = 0x65,
	LOCAL6_OP = 0x66,
	LOCAL7_OP = 0x67,
	ARG0_OP = 0x68,
	ARG1_OP = 0x69,
	ARG2_OP = 0x6A,
	ARG3_OP = 0x6B,
	ARG4_OP = 0x6C,
	ARG5_OP = 0x6D,
	ARG6_OP = 0x6E,
	STORE_OP = 0x70,
	ADD_OP = 0x72,
	SUBTRACT_OP = 0x74,
	INCREMENT_OP = 0x75,
	DECREMENT_OP = 0x76,
	MULTIPLY_OP = 0x77,
	DIVIDE_OP = 0x78,
	SHL_OP = 0x79,
	SHR_OP = 0x7A,
	AND_OP = 0x7B,
	OR_OP = 0x7D,
	XOR_OP = 0x7F,
	NOT_OP = 0x80,
	DEREF_OP = 0x83,
	SIZEOF_OP = 0x87,
	INDEX_OP = 0x88,
	DWORDFIELD_OP = 0x8A,
	WORDFIELD_OP = 0x8B,
	BYTEFIELD_OP = 0x8C,
	BITFIELD_OP = 0x8D,
	QWORDFIELD_OP = 0x8F,
	LAND_OP = 0x90,
	LOR_OP = 0x91,
	LNOT_OP = 0x92,
	LEQUAL_OP = 0x93,
	LGREATER_OP = 0x94,
	LLESS_OP = 0x95,
	CONTINUE_OP = 0x9F,
	IF_OP = 0xA0,
	ELSE_OP = 0xA1,
	WHILE_OP = 0xA2,
	NOP_OP = 0xA3,
	RETURN_OP = 0xA4,
	BREAK_OP = 0xA5,
	ONES_OP = 0xFF,

	// Extended opcodes
	MUTEX = 0x01,
	CONDREF_OP = 0x12,
	ARBFIELD_OP = 0x13,
	SLEEP_OP = 0x22,
	OPREGION = 0x80,
	FIELD = 0x81,
	DEVICE = 0x82,
	PROCESSOR = 0x83,
	THERMALZONE = 0x85,
	INDEXFIELD = 0x86,	// ACPI spec v5.0 section 19.5.60,

	// OpRegion Address Spaces
	OPREGION_MEMORY = 0x00,
	OPREGION_IO = 0x01,
	OPREGION_PCI = 0x02,
	OPREGION_EC = 0x03,
	OPREGION_SMBUS = 0x04,
	OPREGION_CMOS = 0x05,
	OPREGION_OEM = 0x80,

	// Field Access Type
	FIELD_ANY_ACCESS = 0x00,
	FIELD_BYTE_ACCESS = 0x01,
	FIELD_WORD_ACCESS = 0x02,
	FIELD_DWORD_ACCESS = 0x03,
	FIELD_QWORD_ACCESS = 0x04,
	FIELD_LOCK = 0x10,
	FIELD_PRESERVE = 0x00,
	FIELD_WRITE_ONES = 0x01,
	FIELD_WRITE_ZEROES = 0x02,

	// Methods
	METHOD_ARGC_MASK = 0x07,
	METHOD_SERIALIZED = 0x08,
};

void AmlParse(uint8_t* code, size_t length);